interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Org implements Node {
  id: ID!
  uid: ID!
  name: String!
  _ct: AWSDateTime
  _md: AWSDateTime
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User
}

type User implements Node {
  id: ID!
  uid: ID!
  pid: ID!
  name: String!
  _ct: AWSDateTime
  _md: AWSDateTime
}

type Device {
  id: ID!
  name: String
  _ct: AWSDateTime
  _md: AWSDateTime
}

type Sensor {
  id: ID!
  pid: ID!
  name: String!
  _ct: AWSDateTime
  _md: AWSDateTime
}

type DeviceConnection {
  items: [Device]
  nextToken: String
}

type SensorConnection {
  items: [Sensor!]
  nextToken: String
}

type Mutation {
  createOrg(name: String!): Org
  createUser(orgId: ID!, name: String!): User
  createDevice(name: String!): Device
  createSensor(deviceId: ID!, name: String!): Sensor
}

type Query {
  node(id: ID!): Node
  getDevice(id: ID!, limit: Int): Device
  getDeviceFn(id: ID!): Device
  listDevices: [Device]
  getDeviceSensors(deviceId: ID!, limit: Int, nextToken: String): SensorConnection
  users(orgId: ID!, first: Int!, after: String): UserConnection
}
